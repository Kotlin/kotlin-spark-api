#!/usr/bin/env bash
set -euo pipefail

# Run like you would `./gradlew arguments`
# but now like `./gradlew_all_versions arguments`.

DRY_RUN=${DRY_RUN:-false}
SCALA2_12VERSION="2.12.19"
SCALA2_13VERSION="2.13.13"
SparkVersionsForBothScalaVersions=("3.4.2" "3.5.1")
SparkVersionsForScala2_12=()

echo Running for "$(expr ${#SparkVersionsForBothScalaVersions[@]} \* 2 + ${#SparkVersionsForScala2_12[@]}) versions of the library."

echo "Cleaning the project first."
if [ "$DRY_RUN" = false ]; then
  ./gradlew clean
fi

ARGS=("$@")
execute() {
  echo "running ./gradlew -Pspark=$SPARK -Pscala=$SCALA -PskipScalaOnlyDependent=$SKIP_SCALA_TUPLES -PenforceCleanJCP=true ${ARGS[*]}"
  if [ "$DRY_RUN" = false ]; then
    ./gradlew -Pspark="$SPARK" -Pscala="$SCALA" -PskipScalaOnlyDependent="$SKIP_SCALA_TUPLES" "${ARGS[@]}"
  fi
}

#SCALA="$SCALA2_12VERSION"
SKIP_SCALA_TUPLES=false
#for spark in "${SparkVersionsForScala2_12[@]}"; do
#  SPARK="$spark"
#  execute
#  SKIP_SCALA_TUPLES=true
#done


execute_for_both_scala_versions() {
  for spark in "${SparkVersionsForBothScalaVersions[@]}"; do
    SPARK="$spark"
    execute
    if [ SPARK != "${SparkVersionsForBothScalaVersions[0]}" ]; then
      SKIP_SCALA_TUPLES=true
    else
      SKIP_SCALA_TUPLES=false
    fi
  done
}
SCALA="$SCALA2_12VERSION"
execute_for_both_scala_versions

SCALA="$SCALA2_13VERSION"
#SKIP_SCALA_TUPLES=false
execute_for_both_scala_versions



