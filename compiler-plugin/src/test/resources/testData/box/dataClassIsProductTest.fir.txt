FILE: dataClassIsProductTest.kt
    package foo.bar

    public final annotation class Sparkify : R|kotlin/Annotation| {
        public constructor(): R|foo/bar/Sparkify| {
            super<R|kotlin/Any|>()
        }

    }
    public final annotation class ColumnName : R|kotlin/Annotation| {
        public constructor(name: R|kotlin/String|): R|foo/bar/ColumnName| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

    }
    public abstract interface Equals : R|kotlin/Any| {
        public abstract fun canEqual(that: R|kotlin/Any?|): R|kotlin/Boolean|

    }
    public abstract interface Product : R|foo/bar/Equals| {
        public abstract fun productElement(n: R|kotlin/Int|): R|kotlin/Any|

        public abstract fun productArity(): R|kotlin/Int|

    }
    public final fun box(): R|kotlin/String| {
        lval user: R|foo/bar/User| = R|foo/bar/User.User|()
        lval name: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(name)).R|java/lang/reflect/Method.invoke|(R|<local>/user|)
        lval age: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(age)).R|java/lang/reflect/Method.invoke|(R|<local>/user|)
        lval a: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(a)).R|java/lang/reflect/Method.invoke|(R|<local>/user|)
        lval b: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(b)).R|java/lang/reflect/Method.invoke|(R|<local>/user|)
        when () {
            !=(R|<local>/name|, String(John Doe)) || !=(R|<local>/age|, Int(25)) || !=(R|<local>/a|, Double(1.0)) || !=(R|<local>/b|, Double(2.0)) ->  {
                ^box String(Could not invoke functions name(), age(), a(), or b() from Java)
            }
        }

        @R|kotlin/Suppress|(names = vararg(String(USELESS_IS_CHECK))) when () {
            (R|<local>/user| !is R|foo/bar/Product|) ->  {
                ^box String(User is not a Product)
            }
        }

        lval canEqual: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(canEqual), vararg(<getClass>(Q|kotlin/Any|).R|kotlin/jvm/java|<R|kotlin/Any|>)).R|java/lang/reflect/Method.invoke|(R|<local>/user|, vararg(R|<local>/user|))
        when () {
            !=(R|<local>/canEqual|, Boolean(true)) ->  {
                ^box String(Could invoke function canEqual() from Java but was false)
            }
        }

        lval productArity: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(productArity)).R|java/lang/reflect/Method.invoke|(R|<local>/user|)
        when () {
            !=(R|<local>/productArity|, Int(4)) ->  {
                ^box <strcat>(String(Could invoke function productArity() from Java but was ), R|<local>/productArity|)
            }
        }

        lval productElement: R|kotlin/Any!| = <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(productElement), vararg(<getClass>(Q|kotlin/Int|).R|kotlin/jvm/java|<R|kotlin/Int|>)).R|java/lang/reflect/Method.invoke|(R|<local>/user|, vararg(Int(0)))
        when () {
            !=(R|<local>/productElement|, String(John Doe)) ->  {
                ^box <strcat>(String(Could invoke function productElement() from Java but was ), R|<local>/productElement|)
            }
        }

        try {
            <getClass>(Q|foo/bar/User|).R|kotlin/jvm/java|<R|foo/bar/User|>.R|SubstitutionOverride<java/lang/Class.getMethod: R|java/lang/reflect/Method!|>|(String(productElement), vararg(<getClass>(Q|kotlin/Int|).R|kotlin/jvm/java|<R|kotlin/Int|>)).R|java/lang/reflect/Method.invoke|(R|<local>/user|, vararg(Int(10)))
        }
        catch (e: R|kotlin/Exception|) {
            ^box String(OK)
        }

        ^box String(Could invoke function productElement() from Java but did not throw IndexOutOfBoundsException)
    }
    @R|foo/bar/Sparkify|() public final data class User : R|kotlin/Any| {
        public constructor(name: R|kotlin/String| = String(John Doe), age: R|kotlin/Int| = Int(25), @R|foo/bar/ColumnName|(name = String(a)) test: R|kotlin/Double| = Double(1.0), test2: R|kotlin/Double| = Double(2.0)): R|foo/bar/User| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final val age: R|kotlin/Int| = R|<local>/age|
            public get(): R|kotlin/Int|

        public final val test: R|kotlin/Double| = R|<local>/test|
            public get(): R|kotlin/Double|

        public final val test2: R|kotlin/Double| = R|<local>/test2|
            @PROPERTY_GETTER:R|foo/bar/ColumnName|(name = String(b)) public get(): R|kotlin/Double|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|kotlin/Int|

        public final operator fun component3(): R|kotlin/Double|

        public final operator fun component4(): R|kotlin/Double|

        public final fun copy(name: R|kotlin/String| = this@R|foo/bar/User|.R|foo/bar/User.name|, age: R|kotlin/Int| = this@R|foo/bar/User|.R|foo/bar/User.age|, @R|foo/bar/ColumnName|(name = String(a)) test: R|kotlin/Double| = this@R|foo/bar/User|.R|foo/bar/User.test|, test2: R|kotlin/Double| = this@R|foo/bar/User|.R|foo/bar/User.test2|): R|foo/bar/User|

    }
